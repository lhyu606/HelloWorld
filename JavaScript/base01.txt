
1、Javascript概述
   1、什么是Javascript
      简称 JS，运行于JS解释器/引擎中的解释型脚本语言

      脚本语言：只有在运行的时候才会被编译或解释的语言

      解释型：执行时才检查语法错误

      JS解释器/引擎：JS脚本的运行环境
        1、独立安装的JS解释器(Node.JS)
	2、嵌入在浏览器内核中的JS解释器

      1、发展史
         1、1992年，NomBas 为自己的软件开发了脚本语言 CMM(C--) --> ScriptEase,可以嵌入在网页中。
	 2、1995年，网景(NetScape)在Navigator2.0浏览器中开发了脚本语言 LiveScript --> Javascript
	 3、1996年，微软公司，在IE3.0中，开发了Javascript的克隆版本 JScript
	 4、1997年 Javascript1.1 版本 作为草案 提交给ECMA(欧洲计算机制造商联合会)众厂家合理推广处 ECMA262规范，更名为-》ECMAScript
	
       2、Javascript组成
          1、核心-ECMAScript
	  2、文档对象模型(DOM,Document Object Model)
	  3、浏览器对象模型(BOM,Browser Object Model)
       3、JS特点
          1、任何一个文本编辑工具都可编辑
	  2、无需编译，直接放在浏览中运行
	  3、弱类型语言
	  4、面向对象编程(OOP)
       4、JS用途
          1、客户端JS
	     1、客户端数据计算
	     2、表单输入验证
	     3、浏览器事件的触发和处理
	        onclick 事件
	     4、网页特效处理
	     5、异步数据提交(AJAX)
	  2、服务器端JS
	     1、分布式运算
	     2、实时服务器
	     3、网络应用
	     4、窗口应用
2、Javascript基础语法
   1、使用JS
      1、浏览器内核
         作用：页面的渲染
	 组成：
	   1、内容排版引擎：解析HTML/CSS
	   2、脚本解释引擎：解析JS
	 1 、IE
	     内核：Trident
	     内容排版引擎：-
	     脚本解释引擎：Chakra
	 2、Firefox
	     内核：Gecko
	     内容排版引擎：-
	     脚本解释引擎：Monkey
	 3、Safari
	     内核：Webkit
	     内容排版引擎：WebCore
	     脚本解释引擎：Nitro
	 4、Chrome  
	     内核：Webkit
	     内容排版引擎：WebCore
	     脚本解释引擎：V8
	 5、Opera
	     2013年之前
	     内核：Presto
	     内容排版引擎：-
	     脚本解释引擎：Carakan
	     2013年之后
	     内核：Webkit
	     内容排版引擎：WebCore
	     脚本解释引擎：V8
      2、搭建JS运行环境
         1、独立安装的JS解释器
	    Node.JS
	    console.log("Hello World");
	    作用：向控制台中打印输出一句话。""里的东西可以随意变化
	 2、嵌入在浏览器中的JS解释器
	    1、直接在 浏览器 的控制台(Console)输入脚本并执行
	    2、将JS脚本嵌入在HTML页面中执行
	      1、通过 html 元素事件 完成脚本执行
	         事件：onclick
		 <button onclick="">
		 </button>
		 document.write('<h1>Hello World</h1>');
	      2、将脚本 嵌入在 Script 标记中
	         <script>
		   JS脚本代码...
		 </script>
	      3、将脚本写在外部文件中(*.js)，在页面中进行引入即可
	         1、创建一个 .js 文件
		 2、文件中 直接编写 JS脚本代码
		 3、<script src="js文件路径"></script>
		    1、必须是双标记
		    2、script元素中，不能出现任何JS代码
		    3、注意顺序
	 3、练习
	    1、创建1.html，创建一个 <script>元素，在页面上以红色打印出自己的姓名
	    2、1.html中，添加一个按钮。为按钮增加 单击事件，在控制台上打印出自己的姓名。
	    3、使用外部脚本文件。将步骤1再执行一遍
   2、JS调试
      JS碰到错误后，只会终止当前块的执行，并不会影响后续块以及html的解析

      练习：
        1、创建2.html，编写一个<script>，其中使用 三行语句尝试在页面打印出"Hello1","Hello2","Hello3"，其中第二行语句 特意编写错误，观察输出结果。
	2、同上 ....，三行语句在控制台上打印输出 "Word1","Word2","Word3"，其中第二行特意编写错误，观察输出的结果。
   3、语法规范
      1、代码组成
         语句：会被JS引擎所解释执行的代码
	 由 ：表达式、关键字、运算符组成
	 严格区分大小写
	    Console.log(); Console书写错误
	    console.log(); 正常执行
	 以 ; 进行结尾

      2、注释
         1、单行注释
	    // 单行注释
	 2、多行注释
	    /* */
3、变量(重点)
   问题：假设 我的 工资为 5000元，每年工资涨幅为 10% ，计算 10年后 我的工资是多少？

   内存：临时保存 程序运行时要用到的数据。

   变量：内存中的一段存储空间，用来保存数据而用的。
   变量名：内存空间的别名
   变量的值：存储在内存空间中的数据

   1、声明变量
      作用：到内存中申请一段空间，并且指定一个别名。
      var 变量名;

      使用 "=" 为变量赋值
      变量名=值;

      简写：
      var 变量名=值;
      注意：
        1、声明变量的时候，尽量不要省略 var 关键字
	   如果 省略了 var ，有可能会造成"全局污染"的结果
	2、声明变量如果未赋值，则有一个默认值，为 undefined

      问题：声明一些变量，分别保存一个人的 姓名(stuName)，性别(stuGender)，年龄(stuAge)，HTML考试成绩(htmlScore)

      一次性声明多个变量：
      var 变量名1,变量名2,....,变量名n;
      var 变量名1=值,变量名2,....,变量名n;
   2、变量名命名规范
      1、不允许使用JS的关键字和保留关键字
         关键字：var,if,else,while,for...
	 保留关键字：class,int,float...
      2、规范
         1、可以包含字母、数字、下划线以及$
	 2、不能以数字开头
	    var name1; 可以
	    var 1name; 错
	 3、尽量见名知意
	    var stuName;
	    var userName;

	    var yonghuxingming;
	 4、可以采用"匈牙利命名法","驼峰命名法","下划线命名法"
	    匈牙利命名法：涉及获取页面表单控件时使用 txt...
	    驼峰命名：
	      单一单词 采用全小写
	      var age;
	      合成词：第一个单词全小写，其余每个单词首字符 大写
	      var userAge;
	    下划线命名法：
	      var _salary;
   3、变量的使用
      1、只声明，未赋值
         值为 undefined
      2、变量如果未经声明直接使用
         console.log(test);
	 语法错误！！！
      3、对变量进行存/取操作
         存：赋值操作
	 取：取值操作
	 1、存 - SET操作
	    变量 出现在 赋值符号(=)的左边
	    var userAge;
	    userAge=18;
	 2、取 - GET操作
	    只要 不出现在 赋值符号(=)的左边，都是取值;
	    var userAge = 18; //声明并赋值
	    console.log(userAge);
	    var newAge = userAge;
	    //userAge 是取值
	    //newAge 是 存值操作

	 注意：赋值符号的左边，只能是变量
	   var userAge = 18;

	   18=18; //不成立
	   18=25; //不成立
   4、练习
      1、创建3.html，在<script>元素中声明三个变量，用来保存快餐店推出的一款套餐内容
        1.1 用一个变量保存一种汉堡的名称
	1.2 用一个变量保存配餐的名称
	1.3 用一个变量保存饮料的名称
      2、追加程序，输出套餐名称及其内容
   
      3、尝试为一个未声明过的变量赋值，再输出
      4、输出一个未声明过的变量，观察结果
4、运算符
   1、赋值运算符
      =
      var userName="张三";
   2、算术运算符
      +,-,*,/,%
      % : 取余，俗称 模
          5%2 ... 1 
	  2%5 ... 2  
	使用场合：
	  1、判断奇偶性
	     52 % 2 ... 0
	  2、判断某数字是否为 几 的倍数
	  3、获取某数字得的最后几位
	     var num = 1234;
	     var last1=num % 10;
	     var last2=num % 100;
      + : 作用
         1、数字的 加法 运算
	 2、字符串的连接作用
	    如果 + 两边的操作数有一个是 字符串("")，那么操作结果就死 连接 而不是加法操作

	    套餐名称：香辣鸡腿煲套餐
	    汉堡：香辣鸡腿堡
	    配餐：炸薯条
	    饮料：可乐
     优先级 ：先 */% 再 加减
       var result = 25+18*2+6/3+5%2;
       可以通过 () 提升优先级
     算术表达式：由算术运算符，连同操作数所组成的表达式。
5、常量
   console.log("Hello World");
   1、什么是常量
      一旦声明好，就不允许在程序运行过程中修改的数据，就是常量
   2、声明常量
      const 常量名=值;
      注意：
        声明时，必须赋初始值
	常量名称，采用全大写形式
   3、练习
      创建4.html，声明一个变量(r)，保存一个圆的半径，计算该圆的周长(l)，以及该圆的面积(s)
      l = 2*PI*r;
      s = PI*r*r;
6、数据类型
   1、什么是数据类型
      保存的数据的类型

      作用：不同类型的数据所开辟的空间大小不一样。
   2、数据类型分类
      1、原始类型 （基本类型）
         1、number 类型
	    数字类型

	    可以表示32位的整数，也可以表示64位的浮点数
	    8位=1字节(byte)

	    整数：占4个字节
	    小数：占8个字节

	    十进制：123456
	    八进制：010
	    十六进制：0x10
	 2、string 类型
	    字符串 类型

	    使用：需要用  ""或'' 将值括起来

	    He"ll"o
	    W'or'ld

	    特殊字符需要进行转义，
	    转义字符：
	      \n:换行
	      \t:一个制表符
	      \r:回车
	      \":"
	      \':'
	      \\:\

	      //单行注释
	      /*多行注释*/
	 3、boolean 类型
	    布尔类型
	    只记录 "真" 或 "假"
	    值：
	      true ：表示真
	      false：表示假
	    在+-*/%运算中
	      true ：当1做运算
	      false：当0做运算
         4、undefined
	    语义：不存在该数据
	    产生原因：
	      1、声明了变量未赋值
	      2、访问的对象的属性不存在
      2、引用类型

  练习：
    1、创建变量分别保存学生的年龄，入学成绩，身高，体重 ，并且输出到控制台上
    2、创建变量分别保存学生的性别，姓名，电话，邮箱，并且输出到控制台上
    3、创建变量保存 今天是否下雨？天是否冷？












