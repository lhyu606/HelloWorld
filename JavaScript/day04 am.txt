
1.***数组API
  splice
****sort
  栈和队列
  二维数组
2.***String

1.***数组API
 splice: 删除，插入，替换
   删除: arr.splice(starti,n)
     删除arr中starti位置开始的n个元素
     强调: n是个数，不考虑含头不含尾
     其实splice可返回删除的元素组成的临时数组。
     var deletes=arr.splice(starti,n)
   插入: arr.splice(starti,0,值1,值2,...)
     在arr的starti位置插入值1,值2,...
     原starti位置及其之后的值，都被向后顺
移
     强调: 0 表示不删除，只插入新值
          不支持打散数组类型参数。
            如果传入数组，会形成子数组
       vs concat: 
         concat: 优: 打散数组类型参数
                 缺: 只能拼接在开头或结尾
         splice: 优: 可指定插入位置
                 缺: 不支持打散数组参数
  替换: var deletes=
         arr.splice(starti,n,值1,值2,...)
       先删除starti位置开始的n个，再在starti位置插入值1,值2。
      强调: 删除的元素个数，和插入新值得个数，不必一致。

 ****sort: 
  自定义: 冒泡，(快速，插入)――手写
    原理: 
  API: arr.sort();
   将arr中的元素按升序排列
   问题: 默认将所有元素转换为字符串再排列
   为什么: js中的数组不限制元素的类型
        为了保证sort方法正常执行，默认将所有元素转为字符串，再比较unicode。
   所以，默认的sort方法，只能排序字符串元素
  如果排序非字符串类型的元素: 2步
    1. 自定义比较器函数
    比较器函数: 专门比较两个值大小的函数
      如何定义: 
        参数: a,b 分别接收要比较的两个值
        返回值: 如果a>b,就返回正数
                否则，如果a<b,就返回负数
                否则，就返回0
      专门比较两个数字大小的比较器:
       function compare(a,b){
	 return a-b;
       }
      专门比较两个字符串长度的比较器:
       function compare(a,b){
	 return a.length-b.length;
       }
    2. 将比较器函数传入sort方法作为比较大小的依据。
       arr.sort(compare);

  补: 其实，函数有第二种创建方法:
   var 函数名=function(...){...}
   何时使用: 只要不希望被声明提前时
  vs function 函数名(...){...}
   只有一点差别: 
    function 函数名 会被声明提前，
    var 函数名=function 不会被声明提前

  降序: 颠倒比较器的正负号，可改升序为降序。
    
  














 