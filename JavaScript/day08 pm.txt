回顾:
创建对象:
  1.创建一个单独的对象: 2种
    1.对象直接量:
      var obj={
	属性名:值,
        方法名:function(){
	  this.属性名
        }
      }
    2.用new:2步
      var obj=new Object();
      obj.新属性名=值;
      obj.新方法名=function(){
	this.属性名
      }

  js中对象本质: 一切对象底层都是hash数组
    相同: 
      每个属性都相当于hash数组中每个元素
        属性名就是字符串类型的key
        属性值就是元素值
      如果访问不存在的属性，不报错，返回undefined
      如果给不存在的属性赋值，会自动添加
      都可用for in循环遍历
    不同: 
      hash数组是Array类型
      对象是Object类型

  2.反复创建多个同一类型的相同结构的对象
    2步:
    1. 创建构造函数:
      function 类型名(属性参数){
	this.属性名=属性参数;
        this.方法名=function(){
	  this.属性名
        }
      }
      优: 代码重用
      缺: 无法节约内存
        解决: 继承
    2. 用new调用构造函数-实例(instance)化       var obj=new 类型名(属性值);

    new: 4件事
    1. 创建一个新的空对象
    2. 设置新对象的__proto__属性继承构造函数的原型对象。
    3. 用新对象调用构造函数
      将构造函数中的this，临时替换为新对象。
    4. 返回新对象的地址给变量

===============================================================
面向对象三大特点: 封装，继承，多态
封装: 将一个事物的属性和功能集中定义在一个对象中。
继承: 父对象的成员，子对象无需创建，即可直接使用。
多态: 同一个方法，在不同情况下，表现出不同的状态。

继承: 
为什么: 即能够代码重用，又节约内存
何时: 只要多个子对象中包含相同的成员，就可将相同的成员保存到父对象中一次，所有子对象，共同使用。
如何使用: 
  原型对象(prototype):
    集中保存所有子对象共有成员的父级对象
  原型对象不用创建，每个构造函数都自带一个原型对象。
  如何获得: 
    1. 构造函数.prototype
    2. 子对象.__proto__
       问题: __proto__是内部属性
       解决: Object.getPrototypeOf(obj)
         获得obj对象的父级原型对象
  如何向原型对象中添加共有成员: 
   构造函数.prototype.新成员=xxxx

操作属性:
  1. 修改自有属性，就必须用子对象
     lilei.age++;
  2. 修改共有属性，就必须用原型对象
     正确:
    Student.prototype.className="初二2班"

     lilei.className="初二2班" 
     错误:在lilei本地添加自有属性className,从此lilei无法再使用共有className属性。

  3. 删除属性:
    delete 对象.属性名
      只能删除当前对象自有的成员
      如果试图删除共有成员，不报错也无法删除。

判断自有、共有属性: 
  自有属性: 直接保存在当前对象本地的属性
    obj.hasOwnProperty("属性名")
    判断obj是否包含自有属性"属性名"
    true――是自有属性
    false――不是自有属性
  共有属性: 保存在原型对象中，多个子对象共享的属性
    !obj.hasOwnProperty("属性名")
    &&obj.属性名!==undefined
  
内置对象的API浏览器兼容性:
  对象.方法(): "方法"保存在对象的构造函数的prototype中。
  比如: Array.prototype : 包含了所有数组类型可用的API
      String.prototype : 包含了所有字符串类型可用的API

原型链(prototype chain):
  由各级对象的__proto__属性，逐级继承，形成的链式结构
  Object.prototype是所有对象的顶级父对象
  Function.prototype是所有函数对象的父对象。
  原型链控制着对象的成员的使用顺序:
    优先使用自有属性
    自己没有，才延原型链向父对象查找
    除非整个原型链上没有，才说明不可用

  vs 作用域链: 控制着变量的使用顺序
    优先使用函数作用域中的局部变量
    如果局部没有，延作用域链向全局找
    除非整个作用域链都没有，才说明不可用

判断继承关系: 
  1. 根据原型对象判断: 
    father.isPrototypeOf(child)
    判断father是否是child的父级对象
    判断child是否继承自father
    强调: 不仅检查直接父对象，而且检查整个原型链。
  2. 根据构造函数判断:
    child instanceof 构造函数
    判断child是否是构造函数创建出的实例
    强调: 不仅检查直接父级，而且检查整个原型链。
笔试题: 判断一个对象是不是数组类型，有几种办法
  typeof(变量)无法区分普通对象和数组
 1.根据原型对象判断: 
   Array.prototype.isPrototypeOf(xxx)
 2.根据构造函数判断:
   xxx instancof Array
 3.根据对象的class属性判断:
   class: 每个对象的内部属性
         记录创建对象时使用的类型名
         一旦创建，无法修改。
   只有一个办法获得对象的class
    调用最原始的Object.prototype.toString方法
    [object Object]
     对象   class
   问题: 数组类型等内置类型，纷纷重写了toString方法，直接调用数组对象的方法，不再返回class属性值。
   解决: call 
    call强行借用一个函数，并临时替换函数中的this为指定对象。
    何时使用:强行借用一个本无法调用到的函数时。
    如何借用: 
 Object.prototype.toString.call(obj1)
 ==="[object Array]"

多态: 
  重写(override):子对象觉得父对象继承来的成员不好用，可以在本地定义同名成员，覆盖父对象成员。
  重写体现了子对象与父对象之间的差异













