
1.***数组

1.***数组
 什么是数组:内存中连续存储多个数据的存储空间，再起一个名字。
            一组连续的变量的集合
 为什么: 
   程序=数据结构+算法
     数据结构: 数据在内存中的存储结构
     算法: 解决一个问题的步骤
 良好的数据结构可以极大提高程序的执行效率
 何时: 今后，只要保存多个相关的数据，都要用数组。
 如何: 
   创建: 
     1. 创建空数组: 
        var arr=[];//创建一个新数组的意思
        var arr=new Array();
               新建 数组
       何时: 如果创建数组时，暂时不知道具体的数组元素。
     2. 创建数组同时，初始化数组元素: 
        var arr=[值1,值2,...];
        var arr=new Array(值1,值2,...);
       何时: 如果创建数组时，已经知道所有元素的值。
     3. 创建n个空元素的数组:
        var arr=new Array(n);
   赋值/取值都要用下标: 
     下标: 数组中唯一标识一个元素的序号
       自动分配的数字下标: 
	从0开始，递增，连续不重复
   赋值: arr[i]=值;
     特殊: 如果arr中i位置没有元素，会自动创建新元素。
     稀疏数组: 下标不连续的数组
   取值: 数组中每个元素的用法和普通变量完全一样！
    如果访问数组中一个不存在的下标位置，不会报错，会返回undefined！
   
   vs 其他语言中的数组: 3不限制:
     1. 不限制元素个数
     2. 不限制元素的数据类型
     3. 不限制下标越界

  属性: arr.length: 表示数组中理论上的元素个数。
   arr.length始终等于最有一个元素的下标+1
   固定套路: 
   1.获得最后一个元素: arr[arr.length-1]
   2.获得倒数第n个元素: arr[arr.length-n]
   3.末尾追加: arr[arr.length]=值
   4.缩容: arr.length-=n，减小数组容量
         超出的元素会丢弃
     比如: 删除最后一个元素: 
         arr.length-=1

 数组是引用类型的对象: 
   垃圾回收: js引擎会自动释放不再被任何变量引用的对象。
   垃圾回收器: js引擎中的小程序，专门负责记录内存中对象的引用次数，并删除不再被引用的对象。
     伴随主线程在后台自动执行。
   建议: 今后只要使用完较大的对象，都要主动赋值为null，释放对对象的引用。
   当所有变量都释放对一个对象的引用后，对象被垃圾回收。

  遍历索引数组: 
   for(var i=0;i<arr.length;i++){
      arr[i]//当前元素
   }

  索引数组: 下标为数字的数组都是索引数组
  关联数组(hash数组):
  什么是: 可自定义下标名称的数组
  为什么: 索引数组中的下标是无意义的数字
    [林心如, 81,  56,  86]
      name  math  chs  eng
  何时: 只要希望每个元素有明确的意义时
  如何创建: 2步:
    1. 创建空数组: var lxr=[];
    2. 向空数组中添加元素，为每个元素定义元素名。
       lxr["name"]="林心如"
  取值/赋值: 每个元素的取值和赋值和索引数组的用法完全相同。只不过下标变为有意义的名称字符串。
  强调: 关联数组中length属性失效！
  遍历关联数组: for in循环
   for(var key in arr){
      arr[key]//当前元素
   }
   in: 依次取出arr中每个元素的下标名称，保存在变量key中

  hash数组的原理: 
   hash算法: 专门接收一个字符串，计算出一个尽量不重复的序号。
    相同字符串，先后计算出的序号一定相同
   存储: 根据元素的名称，计算出一个序号
       将元素值保存到指定序号的位置上
   取值/查找: 用提供的元素名，计算出和存储时完全相同的序号，直接到序号所在位置获取元素值。
   优: 查找速度极快：
      不用遍历，查找速度和元素个数，以及存储位置无关！
   vs 索引数组: 只能靠遍历查找，查找速度慢，受元素个数和元素存储位置的影响极大。

2. ***数组常用API: 
  1. 转字符串: 
   String(arr): 将每个元素都转为字符串，用","相连。――拍照 用于判断数组是否发生变化
   var str=arr.join("连接符"): 
      将每个元素都转为字符串，用自定义的"连接符"相连。
   固定套路: 
   1. 无缝拼接: arr.join("")
        如果省略""，就和String等效了
   2. 将单词拼接成句子: 
	arr.join(" ")
   3. 将数组元素，批量生成页面元素:
        "<标签>"+
        arr.join("</标签><标签>")+
        "</标签>"
  2.连接和截取子数组: 
   连接: var newArr=arr1.concat(arr2);
        将arr2拼接到arr1之后，返回新数组
     强调: concat无权修改原数组，只能返回新数组，必须用变量接住拼接的结果。
     其实: .concat(值1,值2,arr2,....);
       其中: .concat可以打散数组类型的参数为单个值。

   截取子数组: 
     var subArr=arr.slice(starti,endi+1);
     截取arr中starti位置开始到endi位置结束的子数组。
     强调: 也无权修改原数组，只会复制子数组。
     强调: API中同时出现开始位置和结束位置时，都是含头不含尾。
     变化: 1. 省略第二个参数，表示截取到结尾。

 3.颠倒数组元素: arr.reverse();
     直接修改原数组。
  






