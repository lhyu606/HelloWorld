回顾: 
数组API:
 1. 转字符串: 
   String(arr)
   arr.join("连接符")
 2. 拼接和截取:
   var newArr=
	arr1.concat(值1,值2,arr2,...);
   var subArr=arr.slice(starti,endi+1);
 3. 翻转: arr.reverse();
 4. splice:
   删除: var deletes=arr.splice(starti,n)
   插入: arr.splice(starti,0,值1,值2,...)
   替换: arr.splice(starti,n,值1,值2,...)
 5. 排序:
    arr.sort();
    定义比较器函数:
    function compare(a,b){return ?-?}
    arr.sort(比较器函数对象)
    颠倒比较器结果的正负可改升序为降序
 6. 栈和队列:
   栈: FILO
    1. 结尾: 入:arr.push(值)
             出:var last=arr.pop();
    2. 开头: 入:arr.unshift(值)
             出:var first=arr.shift();
   队列: FIFO
    结尾入: arr.push(值)
    开头出: var first=arr.shift();

字符串API:
1. 下标访问每个字符
2. length属性记录字符个数
3. 拼接和截取: concat和slice
4. 大小写转换: 
    str.toUpperCase();
    str.toLowerCase();
=======================================================================
1.***String:
***检索关键词:
  *****正则表达式:
  替换:
    扩展:删除，格式化
  切割: 

***检索关键词: 4种: 
  1. 检索一个固定的关键词的位置:
   var i=str.indexOf("关键词",fromi)
   在str中查找fromi位置后，下一个"关键词"的下标位置。
   简写: 省略fromi，表示从0位置开始
   返回值: 本次找到的关键词第一个字符在字符串中的下标位置。
      如果没找到，返回-1
   var i=str.lastIndexOf("关键词",fromi)     在str中查找fromi位置前，上一个"关键词"的下标位置。
   简写: 省略fromi，表示从末尾位置开始
   缺: 只能找固定的一个关键词。

  2. 判断是否包含符合规则的关键词：
     支持正则: 
    var i=str.search(/正则表达式/);
    查找str中第一个关键词的位置 
    返回值: 如果找到，返回下标位置
            如果没找到，返回-1

*****正则表达式:
 规定字符串中字符出现的规律的规则。
 何时使用: 只要按规则模糊检索关键词时
 如何定义: 
  1. 最简单的正则表达式：关键词原文
  2. 字符集: 规定一位字符可用的备选字符列表。
      何时: 只要一位字符，有多种可能时，都要将备选字符定义在一个字符集中。
      如何: [字符列表]
       强调: 所有字符连续排列，不需要分割
             一个字符集，只能修饰一位字符
             一个字符集中必须且只能选一个
    网址: regexper.com
      简写: 如果字符集太长，且连续: 
            用-省略中间的字符:
            1位字母:[A-Za-z]
            1位数字:[0-9]
            1位汉字:[\u4e00-\u9fa5]
      特殊: "除了xxxx" : [^xxx]
             比如: 除了4和7 [^47]
           强调: ^必须放在[]内的开头
  3.预定义字符集:常用字符集的简化:
    4个: 1位数字: \d =>[0-9]
         1位数字，字母，_: \w 
			=> [0-9A-Za-z_]
         1位空字符: \s 空格 换行 Tab
    强调: 预定义字符集只有在和规则完全匹配时，才能使用。
      如果规则和预定义字符集不完全匹配，就必须自己定义字符集。
     
         1位任意字符: .
  4. 量词: 固定一个字符集出现次数的规则
    1. 有明确数量边界的
      字符集{m,n} 字符集最少m个，最多n个
      字符集{m,}  m个以上
      字符集{m}   必须m个
    2. 没有明确数量边界的
      字符集?  可有可无，最多1个
      字符集*  可有可无，个数不限
      字符集+  至少1个，多了不限
  5. 选择和分组:
    选择: 规则1|规则2  读作"或"
      在两个规则中匹配其一即可。
    分组: 将一组规则，用()包裹
  练习：手机号:   
    +86或0086  可有可无，最多1次
    空字符     可有可无，多了不限
    1
    34578
    9位数字
    (\+86|0086)?\s*1[34578]\d{9}
  6. 指定匹配位置: 
    ^ 匹配字符串开头
      比如: 匹配开头的空字符: ^\s+
    $ 匹配字符串结尾
      比如: 匹配结尾的空字符: \s+$

    比如: 同时匹配开头或结尾的空字符
      ^\s+|\s+$

    \b 匹配单词边界: ^ $ \s 标点
      何时使用: 只要找单独的单词





