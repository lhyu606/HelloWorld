
1.***RegExp
2.Math
3.Date

1.***RegExp: Regular Expression
  什么是: 封装一条正则表达式
          提供用正则表达式执行验证和查找的API。
  如何使用: 
    创建: 2种
     1. 正则直接量: var reg=/reg/ig
       何时使用: 在创建正则表达式对象时，就已经确定规则。
       特殊字符: 如果出现/，要转为\/
     2. 用new: 
	var reg=new RegExp("reg","ig");
       何时使用: 如果正则需要在运行时动态拼接而成。
       强调: "reg"不用加前后/
       特殊字符: \ " ' 都要转为\\  \"  \'
  RegExp API:
   1. 即找每个关键词的内容，又获得每个关键词的位置: 
     如何使用: 
      var arr=reg.exec(str);
    在str中查找和reg匹配的一下一个关键词
    如果找所有，要用循环推动
    原理: 
      1. 默认，reg会从头开始，查找str中下一个关键词的位置。
      2. 返回值: 
         arr:["完整关键词",$1,$2,...]
         arr.index:本次找到的关键词的位置
      3. 每次查找后，将reg对象的lastIndex属性改为当前位置+关键词字符个数。
         reg.lastIndex: 表示下次开始位置
      4. 如果找不到，就返回null
    在查询过程中，可用RegExp.$n直接获得本次找到的关键词的第n个分组子内容。
	
  练习: 
    贪婪模式:正则表达式默认会匹配最长的符合规则的子字符串。
    懒惰模式:让正则只匹配最短的符合条件的子字符串
    贪婪改懒惰: .*? .+?
    其实也可用[^xxx]

  2. 验证: var bool=reg.test(str)
     如果str符合reg的格式要求，返回true
                          否则，返回false
     问题: 只要str中部分符合reg的要求，就返回true。但是验证都要求完整匹配
     解决: 验证时，必须前+^，后+$ 




