回顾:
1. 访问器，public，private
2. 继承
  代码重用: 函数,对象,构造函数,继承
               重构        抽象
  如何继承:4种:   
   1. 修改两个现有对象间的继承关系:
      Object.setPrototypeOf(child,father)
   2. 基于现有父对象，创建子对象，并扩展新属性:
var child=Object.create(father,{新属性});
   3. 批量修改多个子对象的父对象:
     修改构造函数的prototype为新对象
     时机: 在创建第一个子对象之前
   4. 两种类型间的继承:
     问题: 多个子类型之间，包含相同的属性定义和方法。
     解决: 3步:
       1. 抽象父类型: 
          将相同的属性集中定义在父类型构造函数中。
          将相同的方法集中定义在父类型原型对象中
       2. 在子类型构造函数中借用父类型构
造
     父类型构造函数.apply(this,arguments)
       3. 设置子类型原型对象继承父类型原型对象。
     Object.setPrototypeOf(
	子类型原型对象,父类型原型对象
     )
===============================================
1.*****ES5
  数组API
  *****bind
  严格模式

数组API: 
  indexOf/lastIndexOf:查找指定元素的位置
  Array.isArray(obj);

  判断数组中所有元素，是否符合要求:
  every:判断每个元素是否*都*满足要求
   arr.every(function(val,idx,arr){
      //回调函数用于检测每个元素:
      //val: 自动获得当前元素值
      //idx: 自动获得当前元素的位置 
      //arr: 自动获得当前正在遍历的数组
      return 判断结果;
   })
  some:判断是否*包含*满足要求的元素
   arr.some(function(val,idx,arr){
      ...
   })






