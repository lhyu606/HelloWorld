回顾:
闭包: 
 重用局部变量，并保护变量不被污染的机制
何时使用: 
 只要希望重用变量，又不被污染时
如何使用:3步:
 1. 用外层函数包裹受保护的变量和操作变量的内层函数
 2. 外层函数将内层函数返回到外部
 3. 调用外部函数，获得内层函数的对象
闭包如何形成: 
  外层函数的函数作用域对象没释放
笔试:
 1. 先找受保护的变量，确定在外层函数调用后，变量最终的值
 2. 确定外层函数向外部返回了几个内层函数对象。所有内层函数对象，公用同一个变量。

缺: 比一般函数占用更多内存空间
    ――易造成内存泄漏

====================================================
1.*****面向对象:
 对象: 程序中描述现实中一个具体事物的属性和功能的程序结构:
    事物的属性，就会成为对象的属性
      属性: 对象中保存一个属性值的变量
    事物的功能，就会成为对象的方法
      方法: 对象中定义的一个函数
    对象中的属性和方法统称为对象的成员
 对象又是，同时存储多个值的一块存储空间
 面向对象: 程序中都是先用对象来描述现实中一个具体事物的属性和功能。再按需调用对象的功能，操作属性。
 为什么: 为了更符合人的想法
 如何使用: 2步:
   1.创建对象:――封装 3种
     1. 对象直接量: (创建单独的对象)
     	var obj={
	    属性名:属性值,
            ...:...,
            方法名:function(){...},
            ...:...,
        }
        强调:
         1.js底层，一切对象都是hash数组。每个属性和方法其实都是hash数组中的元素。
         2.对象内的方法中访问对象自己的属性: 
         this.属性名
       其中: this默认指当前所在对象

     2. 用new: (创建单独的对象) 2步:
        1. 先创建空对象: 
	  var obj=new Object();
          new和()都可省略，但不能同时省略
        2. 再向空对象中添加属性和方法
          obj.新属性=值;
          obj.新方法=function(){...};
        强调: js中对象随时可添加新属性和方法。――底层就是hash数组
    3. 反复创建多个相同结构（同一类型）的对象:
	2步: 
       1. 定义构造函数:【此处函数名首字母大写】
         构造函数: constructor
	  专门描述一类对象统一结构的函数
         function 类型名(属性参数){
	   this.属性名=属性参数;
           this.方法名=function(){...}
         }
       2. 用new调用构造函数，传入属性值:
         var obj=new 类型名(属性值,...);
     原理: new 4件事儿:
       1. 创建一个空对象
       2. ?
       3. 用空对象调用构造函数
         将构造函数中的this，替换为空对象
         构造函数会向空对象中添加新的属性和方法
       4. 返回新对象的地址保存在变量中

   this: 1. 对象的方法内，表示当前对象
      2. 构造函数中，表示正在创建的新对象

   2.调用对象的方法，操作对象的属性:
      对象.属性名: 用法和普通变量完全一样
      何时: 只有属性名固定不变时
      对象["属性名"]
      何时: 如果属性名是从变量中获得，或需要动态生成时。
      如果访问到不存在的属性，不会报错，返回undefined。
      对象.方法名();同普通的函数完全一样







