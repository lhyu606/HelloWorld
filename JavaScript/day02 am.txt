
1.***函数:
2.全局函数:了解
3.分支结构:

1.***函数:
  什么是函数: 封装一项任务步骤清单的代码段，再起一个名字。
  为什么: 直接在全局编写的代码无法重复使用，只能反复编写多次。
  何时: 只要一段代码，可能被反复调用执行，就都要先保存在一个函数中，再反复调用函数即可。
  优: 代码重用
  如何使用: 
    声明:创建一个函数对象，封装一项任务的步骤清单
      function 函数名(参数列表){
	步骤清单代码段;
        return 返回值;
      }
    参数: 执行函数时必须的数据列表
       本质: 其实就是一个普通的变量
             专门接收调用函数时，传入的必要数据。
       何时: 当一项任务必须某些数据才能正常执行时，就必须定义参数。
       作用: 让程序变的更灵活
    返回值: 函数的执行结果
       何时: 如果调用者需要获得函数的执行结果时，函数内就必须定义返回值。
       return只负责返回结果，不负责保存结果。

    存储: 函数名就是一个普通的变量
      函数定义是一个函数对象
      函数名变量通过地址，引用函数对象

    调用: 让引擎找到指定名称的函数，按照函数体执行程序
      var 返回值=函数名(参数值列表);
  ***强调: 函数只有调用才执行，不调用不执行。
      如果函数没有返回值，可省略之前的=
      如果函数有返回值，就必须声明变量保存住返回的值。
      参数值列表: 顺序和个数都要和定义时的参数列表保持一致。

***作用域(scope): 一个变量的可用范围
       本质: 内存中存储变量的对象
  2种: 
   全局作用域:window 保存所有全局变量和函数的对象。
      全局变量: 不属于任何函数的，直接定义在全局的变量。
          特点: 随处可用，可反复使用
            缺: 极容易被污染
             所以，尽量少用全局变量。
   函数作用域: 保存函数中局部变量的对象
      局部变量: 在函数内声明的变量
         2种: 
          1. 在函数内var的变量
          2. 参数变量，也是局部变量
         特点: 局部变量，出了函数，不可用
变量的使用顺序:
   优先使用局部变量
   如果局部没有，去全局找
   如果全局找不到，就会报错

***声明提前(hoist):
  在程序开始执行前，
  将var声明的变量和function声明的函数，提前集中到当前作用域的顶部声明
  赋值留在原地
  
***按值传递(byValue):
  两变量间赋值时，或将变量作为参数传入函数时，其实只是将原变量中的值复制了一个副本给对方
   结果: 
    1 变量是原始类型（共五种）的值:number、string、boolean、undefined、null。
      在函数内修改新变量，不会改变原变量      
    2 变量是引用类型的对象（两种）:函数与数组
                






