
1. *****ES5
  *****对象的属性
  ***防篡改
  ***Object.create()
  ***数组API
  *****bind

1. *****ES5
对象的属性: 
 命名属性: 自定义的属性
   数据属性: 实际存储属性值得属性
     四大特性:
     value: 实际存储属性值
     writable: 控制是否只读
     enumerable: 控制能否被遍历(for in)到
       但是,用.依然可访问到
     configurable: 控制以上特性是否可修改，以及是否可以删除属性。

     如何查看四大特性:
     Object.getOwnPropertyDescriptor(
	obj,"属性名"
     )
     如何修改一个属性的四大特性:
     Object.defineProperty(
	obj,"属性名",{
	  特性:值,
           ...:...
        }
     )
     第三个参数中，只写需要修改的特性即可

     如果defineProperty修改的属性不存在，会自动创建。
     但是，defineProperty自动创建的属性，四大特性，默认都为false！
     而普通方式添加的属性,四大特性都为true。

     defineProperty问题：一次只能修改一个属性。
　　 解决: Object.defineProperties(
	      obj,{
    	        属性名:{
                   特性名:值,
                   ...:...,
                },
                ...
              }
           )
   问题: 数据属性对属性的保护比较简单
   解决: 用访问器属性自定义保护逻辑

   访问器属性: 不直接保存属性值，而是为其它数据属性提供保护的特殊属性
    四大特性: 
     get:function(){
	return 受保护的属性的值
     },
     set:function(val){
	//验证通过
	受保护的属性=val
     }
     enumerable:
     configurable:
    何时: 对一个属性自定义保护逻辑时
    如何:
     创建: Object.defineProperty(
	    obj,"属性名",{
             get:function(){return 属性},
             set:function(val){
 	       //先判断value
               属性=val
             }
            }
           )
     强调: 不要用同对象的另一个属性保存实际数据。因为极容易被篡改。
       解决: 使用闭包封装一个受保护的局部变量。

     何时调用:
       试图获取访问器属性保护的值，自动调用get方法
       试图为访问器属性保护的属性赋值时，自动调用set方法，会传入等号右侧的新值给val参数。

笔试题: 在js中定义一个类型，包含公有属性(public)和私有属性(private)
   public: 在对象外，可用.访问到的属性
   private: 仅在对象内是使用的属性
     js中私有属性其实就是受闭包保护的一个局部变量。
   

 内部属性: 自动添加的，不允许外部随便访问的属性
   比如: __proto__    class

***防篡改: 
 防止对已经创建好的对象的属性进行增减。
 三个级别:
  1. 防扩展: 禁止向对象中添加新属性
    每个对象都有一个内部属性extensible,默认为true
     控制能否向对象中添加新属性
     设置对象防扩展: 
      Object.preventExtensions(obj)
      设置obj的内部属性extensiable为false
       使obj对象无法再扩展新属性
    问题: 不防删除
  2. 密封: 即防扩展，又设置所有属性的configurable为false！所有属性禁止删除
     Object.seal(obj);
     密封后，属性值，可改
  3. 冻结: 所有属性禁止增减，属性值禁止修改。
    何时使用: 专门定义一个对象，集中保存程序中使用的所有常量属性。
      为了保证对象内的常量属性不被修改，都要将整个对象密封起来:
       Object.freeze(obj);

Object.create(): 
 1.基于一个现有父对象，创建一个新子对象，
 2.继承父对象
 3.同时扩展子对象的自有新属性

 何时使用: 只要基于一个现有父对象，创建子对象时
 如何使用: 
  var child=Object.create(father,{
    同defineProperties中第2个参数
  })
  如果不扩展新属性，可省略第二个参数










