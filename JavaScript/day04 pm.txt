
1. ***数组API:
  栈和队列
  二维数组
2. ***String:

1. ***数组API:
 栈(stack)和队列(queue): 
  js中没有专门的栈和队列的类型。
  都是用普通的数组模拟
  只不过调用了专门的API，按一定顺序操作数组的元素。
  
  栈: 一端封闭，另一端进出的数组
   FILO
   只要希望始终使用最新进入数组的元素时
   如何使用: 
    1. 结尾出入栈:
      入: arr.push(值)
      出: var last=arr.pop();
     特点: 无论出入栈操作，剩余元素的位置不会发生变化。
    2. 开头出入栈:
      入: arr.unshift(值)
      出: var first=arr.shift()
     特点: 每次出入栈操作，剩余元素的位置都会受影响。

  队列: 只能从一端进入，从另一端出的数组
    FIFO
   只要希望按照先来后到的顺序依次使用数组元素时
   如何使用: 
     结尾入: arr.push(值)
     开头出: var first=arr.shift()

 二维数组: 数组中的元素，又引用了另一个子数组。
  何时使用: 
    1.保存横行竖列的二维数据时
    2.需要对现有数组内容，做进一步分类时
  如何使用:
    创建: 
      1. 创建空数组，后初始化: 
        var arr=[];
        arr[0]=[...]
      2. 创建数组同时，初始化元素:
        var arr=[
	  [...],
          [...],
            ...
        ]
   访问二维数组的元素: 
     arr[r][c]
     强调: 二维数组中r不能越界
   遍历二维数组:
     for(var r=0;r<arr.length;r++){
  	for(var c=0;c<arr[r].length;c++){
	   arr[r][c]//当前元素
	}
     }

2. ***String:一串字符组成的只读字符数组
    vs 数组: 1. 下标访问每个字符
             2. length属性记录字符个数
             3. 数组中不直接修改原数组的API，字符串都可用: concat  slice
       不同: 毕竟不是数组类型，无法使用所有数组类型的API。

 内置对象: ES标准中规定的，浏览器厂商已经实现的内置类型: 11个
   Number String Boolean ――包装类型
   Array RegExp Date Math
   Error
   Function Object
   Global(在浏览器中被window取代)

 包装类型: 专门封装原始类型的值
           并提供操作原始类型的值得方法
           的对象
  为什么: 原始类型的值不包含任何功能
       但是，实际开发中，需要对原始类型的值反复执行相同的操作。
  解决: 提前定义包装类型，集中保存该类型常用的操作方法。每次对原始类型数据调用方法时，都临时用包装类型包裹原始类型的值。
  何时使用: 当试图用原始类型的值调用方法时，自动创建包装类型的对象，封装原始类型的值。实际调用的，其实是包装类型对象的方法。
    释放: 方法调用后，自动释放！

 String API:
****所有String API都无权修改原字符串，只能返回新字符串，所以都要用变量接住。
  1. 大小写转换: 
    何时使用: 只要不区分大小时，都要先转换为一致的大小写，再操作。
    str.toUpperCase();
    str.toLowerCase();
 

 







